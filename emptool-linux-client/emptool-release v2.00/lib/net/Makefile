# empeg-car library Makefile
#
# (C) 1999 empeg ltd.
#
# This software is licensed under the GNU General Public Licence (see file
# COPYING), unless you possess an alternative written licence from empeg ltd.
#
# (:Empeg Source Release 1.21 01-Apr-2003 18:52 rob:)
#
# Authors:
#   Mike Crowe <mac@empeg.com>
#

.PHONY: clean depclean distclean runtests tests

TOP=../..
include $(TOP)/Make.rules

TARGET_CXXFLAGS+=-D "_LIB"
TARGET_LIBDIR=$(TARGET_SPECIFIC_LIBDIR)

SRC_COMMON:=	DatagramSocket.cpp \
		http_stream.cpp \
		ipaddress.cpp \
		nameservers.cpp \
		socket.cpp \
		StreamSocket.cpp \
		tcp_stream.cpp

SRC_UNIX:= \
		interface.cpp \
		InterfaceList_unix.cpp \
		ntp_request.cpp

SRC_WIN32:= IfTable.cpp \
		InterfaceList_win32.cpp \
		IpAddrTable.cpp

ifeq ($(ARCH), win32)
SRC_ALL:=$(SRC_COMMON) $(SRC_WIN32)
else
SRC_ALL:=$(SRC_COMMON) $(SRC_UNIX)
endif

TARGET_SRC:=$(wildcard $(SRC_ALL))
TARGET_HEADERS=

TARGET_OBJS1=$(TARGET_SRC:%.c=$(TARGET_PREFIX)%$(OBJ_SUFFIX))
TARGET_OBJS=$(TARGET_OBJS1:%.cpp=$(TARGET_PREFIX)%$(OBJ_SUFFIX))
TARGET_DEPS=$(wildcard $(TARGET_OBJS:$(OBJ_SUFFIX)=.d))

THIS_TARGET=$(TARGET_SPECIFIC)

TARGET=$(TARGET_LIBDIR)$(LIB_PREFIX)empeg_net$(LIB_SUFFIX)

$(TARGET) : $(TARGET_OBJS)

.PHONY: downloadable-root
downloadable-root: $(TARGET)

tests :

runtests :

http_stream_errors.h: http_stream_errors.mes $(ERRBUILD)
	$(ERRBUILD) -h -o http_stream_errors http_stream_errors.mes

net_errors.h: net_errors.mes $(ERRBUILD)
	$(ERRBUILD) -h -o net_errors net_errors.mes

# Automatically-generated headers
#
# These cause a problem, as they must exist before compilation starts, yet
# without these rules no dependency on them would exist except for the ones
# generated by compilation. We break this vicious circle by creating an (empty)
# sub-makefile; make remakes sub-makefiles before doing any real work and we
# can subvert this mechanism to make our generated headers too.

.force-header-generation: http_stream_errors.h net_errors.h
	touch .force-header-generation

ifneq ($(CLEANING),1)
-include .force-header-generation
endif

clean :
	$(RM) -rf $(TARGET) interface interface-test$(OBJ_SUFFIX)
	$(RM) core *~ http_stream_errors.h net_errors.h

interface: interface.cpp $(TARGET)
	$(TARGET_CXX) interface.cpp $(TARGET_CXXFLAGS) -o interface-test$(OBJ_SUFFIX) -DTEST
	$(TARGET_LD) interface-test$(OBJ_SUFFIX) $(TARGET_LDFLAGS) -o interface $(TARGET)

distclean : clean
	$(RM) -rf arm-*-debug* pc-*-debug* win32-*-debug*
	$(RM) .depend

ifneq ($(CLEANING), 1)
ifneq ($(TARGET_DEPS),)
-include $(TARGET_DEPS)
endif
endif
