# Ignore all the other configure/makefiles blah.
# They suck.
#
#
# A lot.

.PHONY: clean distclean depclean

TOP		= ../..
include $(TOP)/Make.rules

# Note that ogg_malloc_new will be linked in *only if no-one else has defined
# it yet* i.e. users of libcodec+libvorbis should get the libcodec one
#
TARGET_SRC =	bitwise.c \
		block.c \
		codebook.c \
		floor0.c \
		floor1.c \
		framing.c \
		info.c \
		mapping0.c \
		mdct.c \
		ogg_malloc_new.cpp \
		registry.c \
		res012.c \
		sharedbook.c \
		synthesis.c \
		vorbisfile.c \
		window.c

TARGET_OBJS2=$(TARGET_SRC:%.S=$(TARGET_PREFIX)%$(OBJ_SUFFIX))
TARGET_OBJS1=$(TARGET_OBJS2:%.c=$(TARGET_PREFIX)%$(OBJ_SUFFIX))
TARGET_OBJS=$(TARGET_OBJS1:%.cpp=$(TARGET_PREFIX)%$(OBJ_SUFFIX))

THIS_TARGET=$(TARGET_GENERIC)

TARGET=$(TARGET_GENERIC_LIBDIR)$(LIB_PREFIX)vorbis$(LIB_SUFFIX)

ARM_ASM=no
ifeq ($(ARCH), arm)
ARM_ASM=yes
endif
ifeq ($(ARCH), armecos)
ARM_ASM=yes
endif

# Always needs signed chars
TARGET_CFLAGS += -fsigned-char

ifeq ($(ARM_ASM), yes)
# Use ARM assembly or it'll be running way too slow
TARGET_CFLAGS += -D_ARM_ASSEM_
endif

all : $(TARGET)

$(TARGET) : $(TARGET_OBJS)

.PHONY: downloadable-root
downloadable-root: $(TARGET)

# Automated testing: See comments in lib/core/Makefile
# Test nothing
TEST_SRC :=

.PHONY: tests

tests : internal_tests external_tests

# Look for .cpp files with a corresponding _test.cpp file.
EXTERNAL_TESTS := $(wildcard $(TEST_SRC:%.cpp=%_test.cpp))
FILES_WITH_EXTERNAL_TESTS := $(EXTERNAL_TESTS:%_test.cpp=%.cpp)
INTERNAL_TESTS := $(filter-out $(FILES_WITH_EXTERNAL_TESTS),$(TEST_SRC))

internal_tests : $(patsubst %.cpp,$(TARGET_PREFIX)test_%,$(INTERNAL_TESTS))

external_tests : $(patsubst %.cpp,$(TARGET_PREFIX)test_%,$(EXTERNAL_TESTS))

$(TARGET_PREFIX)test_%: %.cpp $(TARGET)
	$(MAKE) -q -C $(TOP)/lib/core || $(MAKE) -C $(TOP)/lib/core
	$(CC_PRE)$(TARGET_CXX) $< $(TARGET_CXXFLAGS) -o $@.o -DTEST
	$(TARGET_LD_PRE)$(TARGET_LD) $@.o $(TARGET) $(TARGET_LDFLAGS) \
		-lempeg_core -lpthread -ldl -o $@
	$@ || rm $@

runtests: tests

# Automatically-generated headers
#
# These cause a problem, as they must exist before compilation starts, yet
# without these rules no dependency on them would exist except for the ones
# generated by compilation. We break this vicious circle by creating an (empty)
# sub-makefile; make remakes sub-makefiles before doing any real work and we
# can subvert this mechanism to make our generated headers too.

.force-header-generation:
	touch .force-header-generation

ifneq ($(CLEANING),1)
-include .force-header-generation
endif

clean :
	$(RM) -rf $(TARGET_PREFIX) $(TARGET)
	$(RM) core *~

distclean : clean
	$(RM) -rf arm-*-debug* pc-*-debug*

ifneq ($(CLEANING), 1)
TARGET_DEPS:=$(TARGET_OBJS:%$(OBJ_SUFFIX)=%.d) $(TEST_OBJS:%$(OBJ_SUFFIX)=%.d)
TARGET_DEPS:=$(wildcard $(TARGET_DEPS))
ifneq ($(TARGET_DEPS),)
-include $(TARGET_DEPS)
endif
endif
