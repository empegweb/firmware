Index: empeg/kernel/Makefile
diff -u empeg/kernel/Makefile:1.33 empeg/kernel/Makefile:1.36
--- empeg/kernel/Makefile:1.33	Fri Jul 28 17:48:41 2000
+++ empeg/kernel/Makefile	Thu Aug  3 14:21:46 2000
@@ -1,7 +1,7 @@
 VERSION = 2
 PATCHLEVEL = 2
 SUBLEVEL = 14
-EXTRAVERSION = -rmk5-np17-empeg32
+EXTRAVERSION = -rmk5-np17-empeg35
 
 #ARCH := $(shell uname -m | sed -e s/i.86/i386/ -e s/sun4u/sparc64/ -e s/arm.*/arm/ -e s/sa110/arm/)
 ARCH := arm
Index: empeg/kernel/arch/arm/mm/proc-sa110.S
diff -u empeg/kernel/arch/arm/mm/proc-sa110.S:1.1.1.3 empeg/kernel/arch/arm/mm/proc-sa110.S:1.3
--- empeg/kernel/arch/arm/mm/proc-sa110.S:1.1.1.3	Sat Mar 18 15:24:13 2000
+++ empeg/kernel/arch/arm/mm/proc-sa110.S	Wed Aug  2 15:24:30 2000
@@ -251,6 +251,14 @@
 		stmfd	sp!, {ip}			@ Save cpsr_SVC
 		ldr	r2, [r0, #TSS_MEMMAP]		@ Get old page tables
 		str	sp, [r0, #TSS_SAVE]		@ Save sp_SVC
+
+		ldr	r5, [r0, #TSK_NEED_RESCHED]	@ Move reschedule flag
+		cmp	r5, #0				@ over to new
+		strne	r5, [r1, #TSK_NEED_RESCHED]	@ TSS if it's set
+		movne	r5, #0				@ Clear old one to
+							@ stop unnecessary
+		strne	r5, [r0, #TSK_NEED_RESCHED]	@ calls to scehdule()
+	
 		ldr	sp, [r1, #TSS_SAVE]		@ Get saved sp_SVC
 		ldr	r5, [r1, #TSS_DOMAIN]
 		ldr	r4, [r1, #TSS_MEMMAP]		@ Page table pointer
Index: empeg/kernel/arch/arm/special/empeg_audio2.c
diff -u empeg/kernel/arch/arm/special/empeg_audio2.c:1.8 empeg/kernel/arch/arm/special/empeg_audio2.c:1.10
--- empeg/kernel/arch/arm/special/empeg_audio2.c:1.8	Thu Jul 27 14:49:24 2000
+++ empeg/kernel/arch/arm/special/empeg_audio2.c	Wed Aug  2 15:37:26 2000
@@ -492,13 +492,16 @@
 
 	/* Any space left? (No need to disable IRQs: we're just checking for a
 	   full buffer condition) */
+	/* This version doesn't have races, see p209 of Linux Device Drivers */
 	if (dev->free==0) {
-		if (file->f_flags&O_NONBLOCK) {
-			return(-EAGAIN);
-		}
+	    struct wait_queue wait = { current, NULL };
 
-		/* Next buffer full */
-		interruptible_sleep_on(&dev->waitq);
+	    add_wait_queue(&dev->waitq, &wait);
+	    current->state = TASK_INTERRUPTIBLE;
+	    while (dev->free == 0) {
+		schedule();
+	    }
+	    remove_wait_queue(&dev->waitq, &wait);
 	}
 
 	/* Fill as many buffers as we can */
