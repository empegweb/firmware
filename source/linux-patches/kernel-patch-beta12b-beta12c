Index: empeg/kernel/Makefile
diff -u empeg/kernel/Makefile:1.32 empeg/kernel/Makefile:1.33
--- empeg/kernel/Makefile:1.32	Thu Jul 20 17:53:25 2000
+++ empeg/kernel/Makefile	Fri Jul 28 17:48:41 2000
@@ -1,7 +1,7 @@
 VERSION = 2
 PATCHLEVEL = 2
 SUBLEVEL = 14
-EXTRAVERSION = -rmk5-np17-empeg31
+EXTRAVERSION = -rmk5-np17-empeg32
 
 #ARCH := $(shell uname -m | sed -e s/i.86/i386/ -e s/sun4u/sparc64/ -e s/arm.*/arm/ -e s/sa110/arm/)
 ARCH := arm
Index: empeg/kernel/arch/arm/special/empeg_audio2.c
diff -u empeg/kernel/arch/arm/special/empeg_audio2.c:1.6 empeg/kernel/arch/arm/special/empeg_audio2.c:1.8
--- empeg/kernel/arch/arm/special/empeg_audio2.c:1.6	Thu Jun 29 12:51:43 2000
+++ empeg/kernel/arch/arm/special/empeg_audio2.c	Thu Jul 27 14:49:24 2000
@@ -1205,11 +1205,12 @@
 		vat = 0xfff - volume_table[mixer_global.volume].vat;
 
 		/* write volume two at a time, slightly faster */
-		beep_start_coeffs[0] = vat;	/* Y_VLsin */
-		beep_start_coeffs[1] = vat;	/* Y_VRsin */
+		beep_start_coeffs[0] = volume;	/* Y_VLsin */
+		beep_start_coeffs[1] = volume;	/* Y_VRsin */
 		if(i2c_write(IICD_DSP, Y_VLsin, beep_start_coeffs, 2)) {
 		    printk("i2c_write for beep failed\n");
 		}
+
 		/* write pitch for first beep */
 		beep_start_coeffs[0] = low;
 		beep_start_coeffs[1] = high;
@@ -1217,20 +1218,29 @@
 		    printk("i2c_write for beep failed\n");
 		}
 		/* write pitch for second beep (unused) */
+		beep_start_coeffs[0] = low;
+		beep_start_coeffs[1] = high;
 		if(i2c_write(IICD_DSP, Y_IcoefBL, beep_start_coeffs, 2)) {
 		    printk("i2c_write for beep failed\n");
 		}
 
 		/* Coefficients for channel beep volume */
-		for(i=0; i<4; i++) beep_start_coeffs[i] = volume;
+		for(i=0; i<4; i++) beep_start_coeffs[i] = vat;
 		if(i2c_write(IICD_DSP, Y_tfnFL, beep_start_coeffs, 4)) {
 		    printk("i2c_write for beep failed\n");
 		}
 
-		dsp_write(X_plusmax, length * 44);
-		dsp_write(X_minmax, 0x3fbfe);
-		dsp_write(X_stepSize, 1);
-		dsp_write(X_counterX, 0);
+		{
+			int t;
+			if(csin_table == csin_table_38000)
+				t = (length * 19) / 2;
+			else
+				t = (length * 441) / 40;
+			dsp_write(X_plusmax, 131071);
+			dsp_write(X_minmax, 262144 - t);
+			dsp_write(X_stepSize, 1);
+			dsp_write(X_counterX, 262144 - t);
+		}
 		
 		/* latch new values in synchronously */
 		dsp_write(Y_iSinusWant, 0x82a);
@@ -1238,9 +1248,13 @@
 		dsp_write(Y_sinusMode, 0x88d);
 		if (length > 0) {
 			/* schedule a beep off */
+
+			/* minimum duration is 30ms or you get a click */
 			if (timer_pending(&dev->beep_timer))
 				del_timer(&dev->beep_timer);
-			dev->beep_timer.expires = jiffies + (length * 2 * HZ)/1000;
+			/* 30ms decay */
+			length += 30;
+			dev->beep_timer.expires = jiffies + (length * HZ)/1000;
 			add_timer(&dev->beep_timer);
 		}
 	}
@@ -1582,52 +1596,28 @@
 		break;    
 	}
 	
-	/* Turn off soft audio mute (SAM) */
-	/* Actually, let's not! */
-	/*
-	dsp_write(Y_samCl,0x189);
-	dsp_write(Y_samCh,0x7a5);
-	dsp_write(Y_delta,0x07d);
-	dsp_write(Y_switch,0x5d4);
-	*/
-
 	/* Setup beep coefficients for this sampling frequency */
 	if(csin_table == csin_table_38000) {
-		dsp_patchmulti(beep_setup, Y_samAttl, 0x471);
-		dsp_patchmulti(beep_setup, Y_samAtth, 0x7ea);
-		dsp_patchmulti(beep_setup, Y_deltaA, 0x059);
-		dsp_patchmulti(beep_setup, Y_switchA, 0x1f3);
-		dsp_patchmulti(beep_setup, Y_samDecl, 0x471);
+		// 6ms rise/fall time, 30ms transient
+		dsp_patchmulti(beep_setup, Y_samAttl, 0x623);
+		dsp_patchmulti(beep_setup, Y_samAtth, 0x7dc);
+		dsp_patchmulti(beep_setup, Y_samDecl, 0x623);
 		dsp_patchmulti(beep_setup, Y_samDech, 0x7ea);
-		dsp_patchmulti(beep_setup, Y_deltaD, 0x059);
+		dsp_patchmulti(beep_setup, Y_deltaA, 0x10e);
+		dsp_patchmulti(beep_setup, Y_switchA, 0x10e);
+		dsp_patchmulti(beep_setup, Y_deltaD, 0);
 		dsp_patchmulti(beep_setup, Y_switchD, 0);
 	}
 	else {
-	    /*
-		dsp_patchmulti(beep_setup, Y_samAttl, 1040);
-		dsp_patchmulti(beep_setup, Y_samAtth, 2029);
-		dsp_patchmulti(beep_setup, Y_deltaA, 195);
-		dsp_patchmulti(beep_setup, Y_switchA, 195);
-		dsp_patchmulti(beep_setup, Y_samDecl, 2029);
-		dsp_patchmulti(beep_setup, Y_samDech, 0x7f9);
-		dsp_patchmulti(beep_setup, Y_deltaD, 195);
-		dsp_patchmulti(beep_setup, Y_switchD, 0x0);
-	    */
-		dsp_patchmulti(beep_setup, Y_samAttl, 0x471);
-		dsp_patchmulti(beep_setup, Y_samAtth, 0x7ea);
-		dsp_patchmulti(beep_setup, Y_deltaA, 0x059);
-		dsp_patchmulti(beep_setup, Y_switchA, 0x1f3);
-		dsp_patchmulti(beep_setup, Y_samDecl, 0x471);
-		dsp_patchmulti(beep_setup, Y_samDech, 0x7ea);
-		dsp_patchmulti(beep_setup, Y_deltaD, 0x059);
+		// 6 ms rise/fall time, 30ms transient
+		dsp_patchmulti(beep_setup, Y_samAttl, 0x45e);
+		dsp_patchmulti(beep_setup, Y_samAtth, 0x7e1);
+		dsp_patchmulti(beep_setup, Y_samDecl, 0x45e);
+		dsp_patchmulti(beep_setup, Y_samDech, 0x7e1);
+		dsp_patchmulti(beep_setup, Y_deltaA, 0x0fb);
+		dsp_patchmulti(beep_setup, Y_switchA, 0x0fb);
+		dsp_patchmulti(beep_setup, Y_deltaD, 0);
 		dsp_patchmulti(beep_setup, Y_switchD, 0);
-		/* testing 1 2 3 */
-		/*
-		dsp_patchmulti(beep_setup, Y_samDecl, 1287);
-		dsp_patchmulti(beep_setup, Y_samDech, 2047);
-		dsp_patchmulti(beep_setup, Y_deltaD, 28);
-		dsp_patchmulti(beep_setup, Y_switchD, 0x0);
-		*/
 	}
 
 	dsp_writemulti(beep_setup);
@@ -2038,67 +2028,53 @@
 };
 
 static dsp_setup beep_setup[] = {
-	/* No scaling of coefficients */
-	{ Y_scalS1_, 0x7ff },
-	{ Y_scalS1, 0x7ff },
-		
-	/* No action */
-	{ Y_cpyS1, 0x8fb },	// (copy a to c1)
-	{ Y_cpyS1_, 0x8f9 },	// no_action
-
-	/* Just left from A and right from B */
-//	{ Y_c0sin, 0x7ff },	// 0x7ff
-//	{ Y_c1sin, 0 },
-//	{ Y_c2sin, 0x7ff },
-//	{ Y_c3sin, 0 },
-		
-	{ Y_c0sin, 0 },	// 0x7ff
-	{ Y_c1sin, 0 },
-	{ Y_c2sin, 0 },	// 0x7ff
-	{ Y_c3sin, 0 },
+	/* Timing generator scaling coefficients */
+	{ Y_scalS1_,	0 },		/* 1-a scale = 0 */
+	{ Y_scalS1,	0x7ff },	/* a scale   = 1 */
+
+	/* Timing generator copy locations */
+	{ Y_cpyS1,	0x8f9 },	/* copy a*S1 to c1 */
+	{ Y_cpyS1_,	0x8fb },	/* nothing */
+
+	{ Y_c0sin,	0 },		/* nothing */
+	{ Y_c1sin,	0 },		/* controlled by a*S1 */
+	{ Y_c2sin,	0 },		/* nothing */
+	{ Y_c3sin,	0 },		/* nothing */
 		
 	/* Full volume */
-	{ Y_VLsin, 0x7ff },	// 0x7ff
-	{ Y_VRsin, 0x7ff },
+	{ Y_VLsin,	0x7ff },	/* volume left  = 1 */
+	{ Y_VRsin,	0x7ff },	/* volume right = 1 */
 		
-	/* No clipping on A or B */
-	{ Y_IClipAmax, 0x080 },
-	{ Y_IClipAmin, 0x080 },
-	{ Y_IClipBmax, 0x080 },
-	{ Y_IClipBmin, 0x080 },
-/*
-	{ Y_IClipAmax, 0x018 },
-	{ Y_IClipAmin, 0x018 },
-	{ Y_IClipBmax, 0x018 },
-	{ Y_IClipBmin, 0x018 },
-*/
+	{ Y_IClipAmax,	0 },		/* no output */
+	{ Y_IClipAmin,	0 },		/* no output */
+	{ Y_IClipBmax,	0x100 },	/* 50% clipping */
+	{ Y_IClipBmin,	0x100 },	/* 50% clipping */
 		
 	/* Tone frequency */
-	{ Y_IcoefAl, 0x089 },
-	{ Y_IcoefAh, 0x7e4 },
-	{ Y_IcoefBL, 0x089 },
-	{ Y_IcoefBH, 0x7e4 },
+	{ Y_IcoefAl,	0 },		/* written as required */
+	{ Y_IcoefAh,	0 },
+	{ Y_IcoefBL,	0 },
+	{ Y_IcoefBH,	0 },
 
 	/* Coefficients for channel beep volume */
-	{ Y_tfnFL, 0x300 },
-	{ Y_tfnFR, 0x300 },
-	{ Y_tfnBL, 0x300 },
-	{ Y_tfnBR, 0x300 },
+	{ Y_tfnFL,	0x800 },	/* yes the manual says -1 */
+	{ Y_tfnFR,	0x800 },	/* but that only causes */
+	{ Y_tfnBL,	0x800 },	/* the wave to invert */
+	{ Y_tfnBR,	0x800 },	/* which is ok */
 
 	/* Attack / decay */
-	{ Y_samAttl, 0x18f },
-	{ Y_samAtth, 0x7f9 },
-	{ Y_deltaA, 0x059 },
-	{ Y_switchA, 0x09e },
-	{ Y_samDecl, 0x18f },
-	{ Y_samDech, 0x7f9 },
-	{ Y_deltaD, 0x059 },
-	{ Y_switchD, 0x000 },
-
-	{ Y_iSinusWant, 0x82a },
-/*	{ Y_sinusMode, 0x897 }, */ /* on */
-	{ Y_sinusMode, 0x89a }, /* off */
-/*	{ Y_sinusMode, 0x88d },	*/ /* superposition mode */
+	{ Y_samAttl,	0 },		/* written when changing */
+	{ Y_samAtth,	0 },		/* channels */
+	{ Y_deltaA,	0 },
+	{ Y_switchA,	0 },
+	{ Y_samDecl,	0 },
+	{ Y_samDech,	0 },
+	{ Y_deltaD,	0 },
+	{ Y_switchD,	0 },
+
+	/* wave routing select */
+	{ Y_iSinusWant,	0x82a },
+	{ Y_sinusMode,	0x89a },	/* off */
 
 	{ 0,0 }
 };
Index: empeg/kernel/arch/arm/special/empeg_display.c
diff -u empeg/kernel/arch/arm/special/empeg_display.c:1.31 empeg/kernel/arch/arm/special/empeg_display.c:1.33
--- empeg/kernel/arch/arm/special/empeg_display.c:1.31	Thu Jul 20 13:17:21 2000
+++ empeg/kernel/arch/arm/special/empeg_display.c	Sat Jul 22 16:48:04 2000
@@ -57,6 +57,12 @@
  *                display to its * originally state rather than just
  *                blindly turning it on.
  *
+ * 2000/07/22 HBF Widended start/end porches to increase tolerances on
+ *                CLKG within BKG (needs 5us either side of rising edge
+ *                to be within BKG). Also, the fudge factor suddenly
+ *                vanished because of this (probably something to do with
+ *                the minimum start porch). Some tidying.
+ *
  * This is the very basic console mapping code: we only provide a mmap()able
  * area at the moment - there is no linkup with the VT code.
  *
@@ -162,12 +168,42 @@
 /* 100ms delay after powering on display before re-enabling powerfails */
 #define POWERFAIL_DISABLED_DELAY 100000
 
+/* LCD register configuration */
+#define LCCR1_SETUP \
+		(LCCR1_DisWdth(EMPEG_SCREEN_HEIGHT*2*4)+ /* 2 v-strips */  \
+		LCCR1_HorSnchWdth(23)+ /* Gives ~10us sync */              \
+		LCCR1_EndLnDel(2)+     /* Gives around 400ns porch */      \
+		LCCR1_BegLnDel(2))
+
+#define LCCR2_SETUP \
+		(LCCR2_DisHght((EMPEG_SCREEN_WIDTH/2)+1)+ /* ie width/2 */ \
+		LCCR2_VrtSnchWdth(1)+ /* Only one non-data lineclock */    \
+		LCCR2_EndFrmDel(0)+   /* No begin/end frame delay */       \
+		LCCR2_BegFrmDel(0))
+	
+#define LCCR3_SETUP \
+		(LCCR3_PixClkDiv(100)+ /* 1us pixel clock at 220Mhz */     \
+		LCCR3_ACBsDiv(10)+     /* AC bias divisor (from pixclk) */ \
+		LCCR3_ACBsCntOff+                                          \
+		LCCR3_VrtSnchH+       /* Vertical sync active high */      \
+		LCCR3_HorSnchH+       /* Horizontal sync active high */    \
+		LCCR3_PixFlEdg)       /* Pixdata on falling edge of PCLK */
+
+#define LCCR0_SETUP \
+		(LCCR0_Mono+          /* Monochrome mode */                \
+		LCCR0_Sngl+           /* Single panel mode */              \
+		LCCR0_LDM+            /* No LCD disable done IRQ */        \
+		LCCR0_BAM+            /* No base address update IRQ */     \
+		LCCR0_ERM+            /* No LCD error IRQ */               \
+		LCCR0_Pas+            /* Passive display */                \
+		LCCR0_LtlEnd+         /* Little-endian frame buffer */     \
+		LCCR0_4PixMono+       /* 4-pix-per-clock mono display */   \
+		LCCR0_DMADel(0))      /* No DMA delay */
+
 /* The display buffer */
 struct empegfb_buffer {
         short palette[EMPEG_PALETTE_SIZE];
-        short fudge[63];
-           /* Fudge factor for the stuff the LCD controller appears to miss */
-        unsigned char buffer[4*EMPEG_SCREEN_SIZE];
+        unsigned char buffer[(4*EMPEG_SCREEN_SIZE)+128];
            /* Screen buffer, remembering it's 4x bigger than what we actually
               use as LCD1-LCD3 are still being driven */
         short dma_overrun[16];
@@ -370,6 +406,11 @@
 	/* Last scanline translates to leftmost and rightmost display cols */
 	s=(unsigned char*)source_buffer;
 	s+=(64*32);
+
+	/* Fudge factor: due to the way SIG is driven, we have a blank bit of
+	   screen memory followed by the actual column 0/127 data */
+	d+=64;
+
 	for(r=0;r<32;r++) {
 		/* Next line is 64 bytes away (screen is 128 wide, 4bpp) */
 		s-=64;
@@ -657,17 +698,8 @@
 	case 1: /* Screen power control */
 		if (arg) {
 			/* LCD control register 0; flags & enable */
-			LCCR0 = 
-				LCCR0_LEN+            /* Enable LCD controller */
-				LCCR0_Mono+           /* Monochrome mode (ie time-domain greyscaling) */
-				LCCR0_Sngl+           /* Single panel mode */
-				LCCR0_LDM+            /* No LCD disable done IRQ */
-				LCCR0_BAM+            /* No base address update IRQ */
-				LCCR0_ERM+            /* No LCD error IRQ */
-				LCCR0_Pas+            /* Passive display */
-				LCCR0_LtlEnd+         /* Little-endian frame buffer */
-				LCCR0_4PixMono+       /* 4-pixels-per-clock mono display */
-				LCCR0_DMADel(0);      /* No DMA delay */
+			LCCR0 = LCCR0_SETUP;
+			LCCR0 |= LCCR0_LEN;
 			
 			/* Disable powerfail interrupts */
 			enable_powerfail(FALSE);
@@ -795,7 +827,7 @@
 void __init empeg_display_init(void)
 {
 	struct display_dev *dev = devices;
-	unsigned char *user_splash=(EMPEG_FLASHBASE+0xa000);
+	unsigned char *user_splash=(unsigned char*)(EMPEG_FLASHBASE+0xa000);
 	int result,delay;
 	
 	/* Firstly, we need to locate the LCD DMA buffer to a 4k page
@@ -860,45 +892,20 @@
 
 	/* Set up the DMA controller's base address for the screen */
 	DBAR1 = (unsigned char*)virt_to_phys((int)dev->hardware_buffer);
-	
+
 	/* LCD control register 1; display width */
-	LCCR1 = 
-		LCCR1_DisWdth(EMPEG_SCREEN_HEIGHT*2*4)+ /* ie height */
-		LCCR1_HorSnchWdth(15)+/* Hsync width minimum 15 due to PIC */
-		LCCR1_EndLnDel(1)+    /* Minimum start/end line delays */
-		LCCR1_BegLnDel(1); 
-	
+	LCCR1 = LCCR1_SETUP;
+
 	/* LCD control register 2; display height */
-	LCCR2 =
-		LCCR2_DisHght((EMPEG_SCREEN_WIDTH/2)+1)+ /* ie width/2 */
-		LCCR2_VrtSnchWdth(1)+ /* Only one non-data lineclock */
-		LCCR2_EndFrmDel(0)+   /* No begin/end frame delay */
-		LCCR2_BegFrmDel(0);
+	LCCR2 = LCCR2_SETUP;
 	
 	/* LCD control register 3; display flags and clockrate */
-	LCCR3 =
-		LCCR3_PixClkDiv(100)+ /* 1us pixel clock at 220Mhz */
-		/* Was 2 before IR investigation */
-		LCCR3_ACBsDiv(10)+     /* AC bias divisor (from pixel clock) */
-		LCCR3_ACBsCntOff+
-		LCCR3_VrtSnchH+       /* Vertical sync active high */
-		LCCR3_HorSnchH+       /* Horizontal sync active high */
-		LCCR3_PixFlEdg;       /* Pixel data valid of palling edge of PCLK */
+	LCCR3 = LCCR3_SETUP;
 	
 	/* LCD control register 0; flags & enable */
-	LCCR0 = 
-		LCCR0_Mono+           /* Monochrome mode (ie time-domain greyscaling) */
-		LCCR0_Sngl+           /* Single panel mode */
-		LCCR0_LDM+            /* No LCD disable done IRQ */
-		LCCR0_BAM+            /* No base address update IRQ */
-		LCCR0_ERM+            /* No LCD error IRQ */
-		LCCR0_Pas+            /* Passive display */
-		LCCR0_LtlEnd+         /* Little-endian frame buffer */
-		LCCR0_4PixMono+       /* 4-pixels-per-clock mono display */
-		LCCR0_DMADel(0);      /* No DMA delay */
-	LCCR0|= LCCR0_LEN;            /* Enable LCD controller */
+	LCCR0 = LCCR0_SETUP;
+	LCCR0|= LCCR0_LEN;
 
-  
 	/* Turn on display: raising GPIO18 turns on the VN02 high-side
 	   driver, which feeds the raw car input power to a number of
 	   departments totally separate from the normal power
@@ -1004,42 +1011,14 @@
 	/* Set up the DMA controller's base address for the screen */
 	DBAR1 = (unsigned char*)virt_to_phys((int)dev->hardware_buffer);
 	
-	/* LCD control register 1; display width */
-	LCCR1 = 
-		LCCR1_DisWdth(EMPEG_SCREEN_HEIGHT*2*4)+ /* ie height */
-		LCCR1_HorSnchWdth(15)+/* Hsync width minimum 15 due to PIC */
-		LCCR1_EndLnDel(1)+    /* Minimum start/end line delays */
-		LCCR1_BegLnDel(1); 
+	/* Set up LCD controller */
+	LCCR1 = LCCR1_SETUP;
+	LCCR2 = LCCR2_SETUP;
+	LCCR3 = LCCR3_SETUP;
 	
-	/* LCD control register 2; display height */
-	LCCR2 =
-		LCCR2_DisHght((EMPEG_SCREEN_WIDTH/2)+1)+ /* ie width/2 */
-		LCCR2_VrtSnchWdth(1)+ /* Only one non-data lineclock */
-		LCCR2_EndFrmDel(0)+   /* No begin/end frame delay */
-		LCCR2_BegFrmDel(0);
-	
-	/* LCD control register 3; display flags and clockrate */
-	LCCR3 =
-		LCCR3_PixClkDiv(100)+ /* 1us pixel clock at 220Mhz */
-		/* Was 2 before IR investigation */
-		LCCR3_ACBsDiv(10)+     /* AC bias divisor (from pixel clock) */
-		LCCR3_ACBsCntOff+
-		LCCR3_VrtSnchH+       /* Vertical sync active high */
-		LCCR3_HorSnchH+       /* Horizontal sync active high */
-		LCCR3_PixFlEdg;       /* Pixel data valid of palling edge of PCLK */
-	
 	/* LCD control register 0; flags & enable */
-	LCCR0 = 
-		LCCR0_LEN+            /* Enable LCD controller */
-		LCCR0_Mono+           /* Monochrome mode (ie time-domain greyscaling) */
-		LCCR0_Sngl+           /* Single panel mode */
-		LCCR0_LDM+            /* No LCD disable done IRQ */
-		LCCR0_BAM+            /* No base address update IRQ */
-		LCCR0_ERM+            /* No LCD error IRQ */
-		LCCR0_Pas+            /* Passive display */
-		LCCR0_LtlEnd+         /* Little-endian frame buffer */
-		LCCR0_4PixMono+       /* 4-pixels-per-clock mono display */
-		LCCR0_DMADel(0);      /* No DMA delay */
+	LCCR0 = LCCR0_SETUP;
+	LCCR0 |= LCCR0_LEN;
   
 	/* Turn on display: raising GPIO18 turns on the VN02 high-side
 	   driver, which feeds the raw car input power to a number of
Index: empeg/kernel/arch/arm/special/empeg_power.c
diff -u empeg/kernel/arch/arm/special/empeg_power.c:1.12 empeg/kernel/arch/arm/special/empeg_power.c:1.13
--- empeg/kernel/arch/arm/special/empeg_power.c:1.12	Thu Jul 20 13:56:54 2000
+++ empeg/kernel/arch/arm/special/empeg_power.c	Mon Jul 24 13:58:56 2000
@@ -182,7 +182,7 @@
 		if (powerfail_enabled())  bitset|=EMPEG_POWER_FLAG_FAILENABLED;
 		if (gplr&EMPEG_ACCSENSE)  bitset|=EMPEG_POWER_FLAG_ACCESSORY;
 		if (power_firstboot)      bitset|=EMPEG_POWER_FLAG_FIRSTBOOT;
-		if (gplr&EMPEG_SERIALDCD) bitset|=EMPEG_POWER_FLAG_EXTMUTE; /* Tel mute */
+		if (!(gplr&EMPEG_SERIALDCD)) bitset|=EMPEG_POWER_FLAG_EXTMUTE; /* Tel mute */
 		if (!(gplr&EMPEG_SERIALCTS)) bitset|=EMPEG_POWER_FLAG_LIGHTS; /* Dimmer sense - inverted */
 
 	}
Index: empeg/kernel/drivers/char/empeg_ir.c
diff -u empeg/kernel/drivers/char/empeg_ir.c:1.29 empeg/kernel/drivers/char/empeg_ir.c:1.30
--- empeg/kernel/drivers/char/empeg_ir.c:1.29	Mon Jun 12 14:55:36 2000
+++ empeg/kernel/drivers/char/empeg_ir.c	Sat Jul 22 11:42:59 2000
@@ -1,7 +1,7 @@
 /*
  * empeg-car Infrared 205/70VR15 support
  *
- * (C) 1999 empeg ltd
+ * (C) 1999-2000 empeg ltd
  *
  * Authors:
  *   Mike Crowe <mac@empeg.com>
@@ -41,6 +41,9 @@
  * 1999/07/04 MAC Added bounds checking on kenwood handler so that
  *                repeat codes are now much less likely to come
  *                from the sky.
+ *
+ * 2000/04/04 MAC Changed to use timing queue, FIQ option.
+ *
  * */
 
 /* Since we now use jiffies for the repeat handling we're assuming
@@ -816,6 +819,7 @@
 	 */
 	GRER|=EMPEG_IRINPUT;
 	GFER|=EMPEG_IRINPUT;
+	GEDR=EMPEG_IRINPUT;
 
 	dev->ir_type = IR_TYPE_DEFAULT;
 	dev->repeat_delay_jiffies = IR_RPTDELAY_DEFAULT;
@@ -1007,7 +1011,7 @@
 	dev->buf_end = dev->buf_start + IR_BUFFER_SIZE;
 	dev->buf_rp = dev->buf_wp = dev->buf_start;
 	dev->wq = NULL;
-	dev->ir_type = IR_TYPE_CAPTURE;
+	dev->ir_type = IR_TYPE_DEFAULT;
 
 	dev->count_valid = 0;
 	dev->count_repeat = 0;
@@ -1044,6 +1048,11 @@
 	claim_fiq(&fh);
 #endif
 #endif
+
+       	/* No interrupts yet */
+	GRER&=~EMPEG_IRINPUT;
+	GFER&=~EMPEG_IRINPUT;
+	GEDR=EMPEG_IRINPUT;
 
 	/* IRQs shouldn't be reenabled, the routine is very fast */
 	result = request_irq(EMPEG_IRQ_IR, ir_interrupt, SA_INTERRUPT,
