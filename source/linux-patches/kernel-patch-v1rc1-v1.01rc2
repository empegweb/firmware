Index: empeg/kernel/Makefile
diff -u empeg/kernel/Makefile:1.36 empeg/kernel/Makefile:1.36.2.3
--- empeg/kernel/Makefile:1.36	Thu Aug  3 14:21:46 2000
+++ empeg/kernel/Makefile	Tue Sep 26 20:19:14 2000
@@ -1,7 +1,7 @@
 VERSION = 2
 PATCHLEVEL = 2
 SUBLEVEL = 14
-EXTRAVERSION = -rmk5-np17-empeg35
+EXTRAVERSION = -rmk5-np17-empeg38
 
 #ARCH := $(shell uname -m | sed -e s/i.86/i386/ -e s/sun4u/sparc64/ -e s/arm.*/arm/ -e s/sa110/arm/)
 ARCH := arm
Index: empeg/kernel/arch/arm/mm/proc-sa110.S
diff -u empeg/kernel/arch/arm/mm/proc-sa110.S:1.3 empeg/kernel/arch/arm/mm/proc-sa110.S:1.3.2.1
--- empeg/kernel/arch/arm/mm/proc-sa110.S:1.3	Wed Aug  2 15:24:30 2000
+++ empeg/kernel/arch/arm/mm/proc-sa110.S	Mon Aug 28 15:14:38 2000
@@ -257,7 +257,7 @@
 		strne	r5, [r1, #TSK_NEED_RESCHED]	@ TSS if it's set
 		movne	r5, #0				@ Clear old one to
 							@ stop unnecessary
-		strne	r5, [r0, #TSK_NEED_RESCHED]	@ calls to scehdule()
+		strne	r5, [r0, #TSK_NEED_RESCHED]	@ calls to schedule()
 	
 		ldr	sp, [r1, #TSS_SAVE]		@ Get saved sp_SVC
 		ldr	r5, [r1, #TSS_DOMAIN]
Index: empeg/kernel/arch/arm/special/empeg_audio2.c
diff -u empeg/kernel/arch/arm/special/empeg_audio2.c:1.10 empeg/kernel/arch/arm/special/empeg_audio2.c:1.10.2.1
--- empeg/kernel/arch/arm/special/empeg_audio2.c:1.10	Wed Aug  2 15:37:26 2000
+++ empeg/kernel/arch/arm/special/empeg_audio2.c	Mon Aug 28 15:17:22 2000
@@ -501,6 +501,7 @@
 	    while (dev->free == 0) {
 		schedule();
 	    }
+	    current->state = TASK_RUNNING;
 	    remove_wait_queue(&dev->waitq, &wait);
 	}
 
Index: empeg/kernel/arch/arm/special/empeg_dac.c
diff -u empeg/kernel/arch/arm/special/empeg_dac.c:1.11 empeg/kernel/arch/arm/special/empeg_dac.c:1.11.8.1
--- empeg/kernel/arch/arm/special/empeg_dac.c:1.11	Thu Apr 20 17:04:08 2000
+++ empeg/kernel/arch/arm/special/empeg_dac.c	Thu Sep 28 12:00:02 2000
@@ -124,6 +124,10 @@
 #define AUDIO_NOOF_BUFFERS		(8)   /* Number of audio buffers */
 #define AUDIO_BUFFER_SIZE		(4608) /* Size of user buffer chunks */
 
+#if AUDIO_NOOF_BUFFERS < 4
+#error Whoops
+#endif
+
 /* Input channels */
 #define INPUT_PCM (1)
 #define INPUT_RADIO (0)
@@ -617,7 +621,7 @@
 
 	/* Set up queue */
 	dev->head=dev->tail=dev->used=0;
-	dev->free=AUDIO_NOOF_BUFFERS;
+	dev->free=AUDIO_NOOF_BUFFERS - 2;
 
 	/* Request appropriate interrupt line */
 	if((err=request_irq(AUDIO_IRQ,audio_interrupt,0,AUDIO_NAME,NULL))!=0) {
Index: empeg/kernel/arch/arm/special/empeg_pdiusb12.c
diff -u empeg/kernel/arch/arm/special/empeg_pdiusb12.c:1.8 empeg/kernel/arch/arm/special/empeg_pdiusb12.c:1.8.6.3
--- empeg/kernel/arch/arm/special/empeg_pdiusb12.c:1.8	Mon Jun 12 14:56:15 2000
+++ empeg/kernel/arch/arm/special/empeg_pdiusb12.c	Tue Sep 26 19:22:36 2000
@@ -201,7 +201,7 @@
                              'c',0,'a',0,'r',0};
 
 /* Predeclarations */
-static void tx_data(void);
+static void tx_data(int kick);
 
 /* Read/write USB chip
  *
@@ -230,14 +230,14 @@
 {
 	unsigned char d;
 	d=*usb_data;
-	{ int a; for(a=0;a<34;a++); }
+	{ int a; for(a=0;a<8;a++); }
 	return(d);
 }
 
 static __inline__ void usb_cwrite(unsigned char dta)  
 {
 	*usb_data=dta;
-	{ int a; for(a=0;a<34;a++); }
+	{ int a; for(a=0;a<41;a++); }
 }
 
 /* Check to see if endpoint is full */
@@ -339,6 +339,10 @@
 	usb_cwrite(SETMODE1_NOLAZYCLOCK|SETMODE1_CLOCKRUNNING|
 		  SETMODE1_SOFTCONNECT|SETMODE1_NONISO);
 	usb_cwrite(SETMODE2_SETTOONE|11);
+
+	/* Enable interrupts */
+	usb_command(CMD_SETDMA);
+	usb_cwrite(SETDMA_EP4IRQENABLE|SETDMA_EP5IRQENABLE);
 }
 
 /* Deal with get_descriptor */
@@ -467,7 +471,7 @@
 		usb_cwrite(EPENABLE_GENERICISOEN);
 		
 		/* If there's anything in the tx buffer, kick tx */
-		if (dev->tx_used>0) tx_data();
+		if (dev->tx_used>0) tx_data(1);
 	} else {
 		/* Panic! */
 		stall_ep0();
@@ -478,31 +482,61 @@
 static __inline__ void rx_data(void)
 {
 	struct usb_dev *dev=usb_devices;
-	int rxstat,bytes;
+	int rxstat,bytes,fifos=1;
+	unsigned char rxdata[2*MAXRXPACKET],*rxd=rxdata;
 
 	/* Get status/clear IRQ */
 	usb_command(CMD_LASTTRANSACTION4);
 	rxstat=usb_cread();
 
+	/* Find how many fifos are full: undocumented command used in the
+	   philips example */
+	usb_command(0x84);
+	if ((usb_cread()&0x60)==0x60) fifos=2;
+
+#if 0
 	/* Any data? If not, return */
 	if (!checkendpoint(CMD_SELECTEP4)) return;
+#endif
 
-	/* Read it from the fifo */
-	usb_command(CMD_READBUFFER);
-	usb_cread(); /* Discard */
-	bytes=usb_cread();
+	while(fifos--) {
+		int a;
 
-	/* No data? */
-	if (bytes==0) return;
+		/* Check there is data */
+		usb_command(CMD_SELECTEP4);
+		if (!(usb_cread()&SELECTEP_FULL)) break;
+
+		/* Read it from the fifo */
+		usb_command(CMD_READBUFFER);
+		usb_cread(); /* Discard */
+		a=bytes=usb_cread();
+		
+		/* No data? */
+		if (bytes==0) break;
+		
+		/* Read data */
+		while(a--) *rxd++=usb_cread();
 
-	/* Bump counts */
-	dev->rx_count+=bytes;
-	dev->stats_rxok[1]++;
+		/* Now we've read it, clear the buffer */
+		usb_command(CMD_CLEARBUFFER);
+
+		/* Packet rx ok */
+		dev->stats_rxok[1]++;
 
 #ifdef DEBUG_USB_1
-	LOG('r');
-	LOGN(bytes);
+		LOG('r');
+		LOGN(bytes);
 #endif
+
+	}
+
+	/* Transfer temp buffer to real buffer */
+	bytes=rxd-rxdata;
+	rxd=rxdata;
+
+	/* Bump counts */
+	dev->rx_count+=bytes;
+	
 	/* If there's no room in the buffer, truncate */
 	if (bytes>dev->rx_free) {
 		bytes=dev->rx_free;
@@ -514,51 +548,50 @@
 	dev->rx_free-=bytes;
 	while(bytes--) {
 		/* Buffer the data */
-		dev->rx_buffer[dev->rx_head++]=usb_cread();
+		dev->rx_buffer[dev->rx_head++]=*rxd++;
 		if (dev->rx_head==USB_RX_BUFFER_SIZE)
 			dev->rx_head=0;
 	}
 		
-	/* Now we've read it, clear the buffer */
-	usb_command(CMD_CLEARBUFFER);
-
 	/* Wake up anyone that's waiting on read */
 	wake_up_interruptible(&dev->rx_wq);		
 }
 
 /* TX on the data fifo */
-static void tx_data()
+static void tx_data(int kick)
 {
 	struct usb_dev *dev=usb_devices;
 	unsigned long flags;
-	int a,txstat;
+	int a,txstat,tofill=2;
 
-	/* Get status/clear IRQ */
-	usb_command(CMD_LASTTRANSACTION5);
-	txstat=usb_cread();
+	if (!kick) {
+		/* Get status/clear IRQ */
+		usb_command(CMD_LASTTRANSACTION5);
+		txstat=usb_cread();
 
 #ifdef DEBUG_USB_1
-	printk("tx(%02x)\n",txstat);
+		printk("tx(%02x)\n",txstat);
 #endif
-	/* Sucessfully sent some stuff: bump counts & reset buffer */
-	dev->stats_txok[1]++;
+		/* Successfully sent some stuff: bump counts & reset buffer */
+		dev->stats_txok[1]++;
 
-	/* If last packet was short, and there's nothing in the buffer to send,
-	   then just stop here with TX disabled */
-	if (usb_txsize<MAXTXPACKET && dev->tx_used==0) {
+		/* If last packet was short, and there's nothing in the buffer
+		   to send, then just stop here with TX disabled */
+		if (usb_txsize<MAXTXPACKET && dev->tx_used==0) {
 #ifdef NO_ZERO_TERM
-		usb_txidle=1;
+			usb_txidle=1;
 #else	
-		/* Just send zero-length packet */
-		usb_txidle=0;
-		usb_txsize=0;
-		writeendpoint(5,0,0);
+			/* Just send zero-length packet */
+			usb_txidle=0;
+			usb_txsize=0;
+			writeendpoint(5,0,0);
 #endif
-		return;
+			return;
+		}
 	}
 
 	/* While we can send stuff... (this will fill both FIFOs) */
-	while(checkendpoint(CMD_SELECTEP5)==0 && dev->tx_used>=0) {
+	while(checkendpoint(CMD_SELECTEP5)==0 && tofill) {
 		/* Fill local packet buffer from TX buffer: if there's nothing
 		   to send (there might be: we need to be able to send zero
 		   length packets to terminate a transfer of an exact multiple
@@ -591,15 +624,23 @@
 		/* Validate the buffer so the chip will send it */
 		usb_command(CMD_VALIDATEBUFFER);
 
+		/* Not idle anymore */
+		usb_txidle=0;
+
+		/* Filled another buffer */
+		tofill--;
+
 		/* Was this packet less than max length? If so, stop here
 		   as that will signal end of write on usb */
 		if (usb_txsize<MAXTXPACKET) break;
 	}
 
-	/* Wake up anyone that's waiting on write when we've got a decent
-	   amount of free space */
-	if (dev->tx_free>(USB_TX_BUFFER_SIZE/4))
-		wake_up_interruptible(&dev->tx_wq);
+	if (!kick) {
+		/* Wake up anyone that's waiting on write when we've got a
+		   decent amount of free space */
+		if (dev->tx_free>(USB_TX_BUFFER_SIZE/4))
+			wake_up_interruptible(&dev->tx_wq);
+	}
 
 #ifdef DEBUG_USB_1
 	printk("tx_d() queued %d byte packet\n",usb_txsize);
@@ -799,10 +840,9 @@
 
 	if (evnt&IRQ1_MAINOUT) {
 		rx_data();
-		rx_data();
 	}
 	if (evnt&IRQ1_MAININ) {
-		tx_data();
+		tx_data(0);
 	}
 	if (evnt&IRQ1_CONTROLOUT) {
 		rx_command();
@@ -854,16 +894,16 @@
 	len+=sprintf(buf+len,"Overall stats\n");
 	len+=sprintf(buf+len,"  %9d RX bytes\n",dev->rx_count);
 	len+=sprintf(buf+len,"  %9d TX bytes\n\n",dev->tx_count);
+	len+=sprintf(buf+len,"  %9d RX buffered\n",dev->rx_used);
+	len+=sprintf(buf+len,"  %9d TX buffered\n\n",dev->tx_used);
 
-	for(a=1;a<2;a++) {
-		len+=sprintf(buf+len,"Endpoint %d\n",a);
-		len+=sprintf(buf+len,"  %9d RX ok\n",dev->stats_rxok[a]);
-		len+=sprintf(buf+len,"  %9d RX error\n",dev->stats_rxerr[a]);
-		len+=sprintf(buf+len,"  %9d RX nak\n",dev->stats_rxnak[a]);
-		len+=sprintf(buf+len,"  %9d RX overruns\n",dev->stats_rxoverrun[a]);
-		len+=sprintf(buf+len,"  %9d TX ok\n",dev->stats_txok[a]);
-		len+=sprintf(buf+len,"  %9d TX error\n\n",dev->stats_txerr[a]);
-	}
+	len+=sprintf(buf+len,"Endpoint %d\n",a);
+	len+=sprintf(buf+len,"  %9d RX ok\n",dev->stats_rxok[a]);
+	len+=sprintf(buf+len,"  %9d RX error\n",dev->stats_rxerr[a]);
+	len+=sprintf(buf+len,"  %9d RX nak\n",dev->stats_rxnak[a]);
+	len+=sprintf(buf+len,"  %9d RX overruns\n",dev->stats_rxoverrun[a]);
+	len+=sprintf(buf+len,"  %9d TX ok\n",dev->stats_txok[a]);
+	len+=sprintf(buf+len,"  %9d TX error\n\n",dev->stats_txerr[a]);
 
 	LOG(0);
 	len+=sprintf(buf+len,"Log: %s",log);
@@ -960,37 +1000,44 @@
    and disable the device when we open and close the device (which in this
    case is just an endpoint anyway) - otherwise, we wouldn't be able to see
    stuff for endpoint 0, ie configuration and connection events */
-static int usb_open(struct inode *inode, struct file *flip)
+static int usb_open(struct inode *inode, struct file *filp)
 {
 	struct usb_dev *dev=usb_devices;
 	
 	MOD_INC_USE_COUNT;
-	flip->private_data=dev;
+	filp->private_data=dev;
 	return 0;
 }
 
-static int usb_release(struct inode *inode, struct file *flip)
+static int usb_release(struct inode *inode, struct file *filp)
 {
 	MOD_DEC_USE_COUNT;
 	return 0;
 }
 
 /* Read data from USB buffer */
-static ssize_t usb_read(struct file *flip, char *dest, size_t count, loff_t *ppos)
+static ssize_t usb_read(struct file *filp, char *dest, size_t count, loff_t *ppos)
 {
-	struct usb_dev *dev=flip->private_data;
+	struct usb_dev *dev=filp->private_data;
 	unsigned long flags;
 	size_t bytes;
+	struct wait_queue wait = { current, NULL };
 
-	while (dev->rx_used==0) {
-		if (flip->f_flags & O_NONBLOCK)
-			return -EAGAIN;
-      
-		interruptible_sleep_on(&dev->rx_wq);
-		/* If the sleep was terminated by a signal give up */
-		if (signal_pending(current))
-			return -ERESTARTSYS;
-	}
+	/* If we're nonblocking then return immediately if there's no data */
+	if ((filp->f_flags & O_NONBLOCK) && dev->rx_used==0)
+		return -EAGAIN;
+
+	/* Wait for room - this method avoids race
+           conditions see p209 of Linux device drivers. */
+	add_wait_queue(&dev->rx_wq, &wait);
+	current->state = TASK_INTERRUPTIBLE;	
+	while (dev->rx_used==0 && !signal_pending(current))
+		schedule();
+	current->state = TASK_RUNNING;
+	remove_wait_queue(&dev->rx_wq, &wait);
+
+	if (signal_pending(current))
+	    return -ERESTARTSYS;
 
 	/* Read as much as we can */
 	save_flags_cli(flags);
@@ -1019,17 +1066,23 @@
 	struct usb_dev *dev = filp->private_data;
 	unsigned long flags;
 	size_t bytes;
+	struct wait_queue wait = { current, NULL };
 
-	while (dev->tx_free == 0) {
-		if (filp->f_flags & O_NONBLOCK)
-			return -EAGAIN;
-      
-		interruptible_sleep_on(&dev->tx_wq);
-
-		/* If the sleep was terminated by a signal give up */
-		if (signal_pending(current))
-			return -ERESTARTSYS;
-	}
+	/* If we're nonblocking then return immediately if there's no room */
+	if ((filp->f_flags & O_NONBLOCK) && dev->tx_free==0)
+		return -EAGAIN;
+
+	/* Wait for room - this method avoids race
+           conditions see p209 of Linux device drivers. */
+	add_wait_queue(&dev->tx_wq, &wait);
+	current->state = TASK_INTERRUPTIBLE;	
+	while (dev->tx_free==0 && !signal_pending(current))
+		schedule();
+	current->state = TASK_RUNNING;
+	remove_wait_queue(&dev->tx_wq, &wait);
+
+	if (signal_pending(current))
+	    return -ERESTARTSYS;
 	
 	/* How many bytes can we write? */
 	save_flags_cli(flags);
@@ -1046,10 +1099,11 @@
 			dev->tx_head=0;
 	}
 
-	/* Do we need to kick the TX? */
-	if (usb_txidle) {
+	/* Do we need to kick the TX? (ie, was the buffer empty before & TX
+	   was idle) */
+	if (usb_txidle && dev->tx_used==count) {
 		/* TX not going, kick the b'stard (while he's down) */
-		tx_data();
+		tx_data(1);
 	}
 	restore_flags(flags);
 
Index: empeg/kernel/arch/arm/special/empeg_power.c
diff -u empeg/kernel/arch/arm/special/empeg_power.c:1.13 empeg/kernel/arch/arm/special/empeg_power.c:1.13.4.1
--- empeg/kernel/arch/arm/special/empeg_power.c:1.13	Mon Jul 24 13:58:56 2000
+++ empeg/kernel/arch/arm/special/empeg_power.c	Mon Sep  4 14:36:21 2000
@@ -159,7 +159,7 @@
 	/* These bits should be stable for half a second before they are
 	   allowed to change */
 	const int unstable_bits = EMPEG_POWER_FLAG_FAILENABLED
-		| EMPEG_POWER_FLAG_EXTMUTE;
+		| EMPEG_POWER_FLAG_EXTMUTE | EMPEG_POWER_FLAG_ACCESSORY;
 	static int saved_unstable = 0;
 	static unsigned long stable_time = 0;
 		
Index: empeg/kernel/drivers/block/ide-probe.c
diff -u empeg/kernel/drivers/block/ide-probe.c:1.15 empeg/kernel/drivers/block/ide-probe.c:1.15.4.1
--- empeg/kernel/drivers/block/ide-probe.c:1.15	Thu Jun 29 12:49:18 2000
+++ empeg/kernel/drivers/block/ide-probe.c	Mon Sep 11 12:30:56 2000
@@ -923,9 +923,9 @@
 			}
 			
 			/* If we've found a drive already, give us another
-			   second to find the secondary drive */
-			if (on_if0>0 && on_if1==0 && retries<17) {
-				retries=17;
+			   second and a half to find the secondary drive */
+			if (on_if0>0 && on_if1==0 && retries<15) {
+				retries=15;
 			}
 		} while(on_if1==0 && retries<20);
 		
Index: empeg/kernel/drivers/char/empeg_ir.c
diff -u empeg/kernel/drivers/char/empeg_ir.c:1.30 empeg/kernel/drivers/char/empeg_ir.c:1.30.4.2
--- empeg/kernel/drivers/char/empeg_ir.c:1.30	Sat Jul 22 11:42:59 2000
+++ empeg/kernel/drivers/char/empeg_ir.c	Mon Aug 28 15:16:19 2000
@@ -165,7 +165,9 @@
 
 /* Used to disallow multiple opens. */
 static int users = 0;
-static struct fiq_handler fh= { NULL, "empeg_ir", NULL, NULL };
+#if USE_TIMING_QUEUE_FIQS
+static struct fiq_handler fh = { NULL, "empeg_ir", NULL, NULL };
+#endif
 
 /* Bottom bit must be clear for switch statement */
 #define IR_STATE_IDLE 0x00
@@ -848,15 +850,23 @@
 	struct ir_dev *dev = filp->private_data;
 	int n;
 
-	while (dev->buf_rp == dev->buf_wp) {
-		if (filp->f_flags & O_NONBLOCK)
-			return -EAGAIN;
-
-		interruptible_sleep_on(&dev->wq);
-		/* If the sleep was terminated by a signal give up */
-		if (signal_pending(current))
-			return -ERESTARTSYS;
-	}
+	struct wait_queue wait = { current, NULL };
+
+	/* If we're nonblocking then return immediately if there's no data */
+	if ((filp->f_flags & O_NONBLOCK) && (dev->buf_rp == dev->buf_wp))
+		return -EAGAIN;
+
+	/* Wait for some data to turn up - this method avoids race
+           conditions see p209 of Linux device drivers. */
+	add_wait_queue(&dev->wq, &wait);
+	current->state = TASK_INTERRUPTIBLE;	
+	while ((dev->buf_rp == dev->buf_wp) && !signal_pending(current))
+		schedule();
+	current->state = TASK_RUNNING;
+	remove_wait_queue(&dev->wq, &wait);
+
+	if (signal_pending(current))
+	    return -ERESTARTSYS;
 
 	/* Only allow reads of a multiple of four bytes. Anything else
            is meaningless and may cause us to get out of sync */
