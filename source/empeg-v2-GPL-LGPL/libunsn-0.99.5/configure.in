dnl
dnl configure.in -- configuration script for libunsn
dnl Copyright (C) 2000  Andrew Main
dnl
dnl This library is free software; you can redistribute it and/or
dnl modify it under the terms of the GNU Lesser General Public
dnl License as published by the Free Software Foundation; either
dnl version 2 of the License, or (at your option) any later version.
dnl
dnl This library is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl Lesser General Public License for more details.
dnl
dnl You should have received a copy of the GNU Lesser General Public
dnl License along with this library; if not, write to the Free Software
dnl Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
dnl

AC_INIT(Lib/addrtounsn.c)
AC_CONFIG_AUX_DIR(.)
AC_CONFIG_HEADER(config.h)
AC_CANONICAL_HOST

test -z "$CFLAGS"  && CFLAGS=  auto_cflags=yes
test -z "$LDFLAGS" && LDFLAGS= auto_ldflags=yes
AC_PROG_CC
if test -n "$auto_cflags"; then
	if test -n "$GCC"; then
		CFLAGS="$CFLAGS -Wall -Wmissing-prototypes -Wno-parentheses -Wwrite-strings -O3"
	else
		CFLAGS="$CFLAGS -O"
	fi
fi
test -n "$auto_ldflags" && LDFLAGS="$LDFLAGS -s"
AC_SUBST(CFLAGS)dnl
AC_SUBST(LDFLAGS)dnl

zefram_CHECK_ASCII
if test "$zefram_cv_sys_ascii" = no; then
	AC_MSG_ERROR(some of this code assumes ASCII -- tell the author to fix it)
fi

AC_PROG_CPP
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_PATH_PROG(PERL_PATH, perl, perl)

AC_C_CONST
AC_C_INLINE

AC_CHECK_LIB(c, printf)
AC_CHECK_LIB(socket, setsockopt)
AC_CHECK_LIB(nsl, gethostbyname)

AC_CHECK_HEADERS(arpa/inet.h errno.h fcntl.h getopt.h grp.h \
	malloc.h memory.h netdb.h netinet/in.h pwd.h signal.h \
	stddef.h stdint.h stdlib.h string.h strings.h syslog.h \
	sys/file.h sys/poll.h sys/select.h sys/socket.h \
	sys/sockio.h sys/syslog.h sys/types.h sys/un.h)
AC_HEADER_SYS_WAIT
AC_HEADER_TIME
AC_CHECK_HEADERS(unistd.h)

stdlib_incs='sys/types.h stddef.h stdlib.h'
stdint_incs='sys/types.h stdint.h stddef.h stdlib.h'
string_incs='sys/types.h memory.h string.h strings.h'
socket_incs='sys/types.h sys/socket.h'
unistd_incs='sys/types.h unistd.h'
wait_incs='sys/types.h sys/wait.h unistd.h'
getopt_incs='sys/types.h getopt.h unistd.h'

zefram_CHECK_TYPE(gid_t, int, $unistd_incs)
zefram_CHECK_TYPE(in_addr_t, uint32_t, $socket_incs netinet/in.h)
zefram_CHECK_TYPE(in_port_t, uint16_t, $socket_incs netinet/in.h)
zefram_CHECK_TYPE(int8_t, char, $stdint_incs)
zefram_CHECK_TYPE(int16_t, short, $stdint_incs)
zefram_CHECK_TYPE(int32_t, long, $stdint_incs)
zefram_CHECK_TYPE(pid_t, int, $unistd_incs)
zefram_CHECK_TYPE(sa_family_t, uint16_t, $socket_incs)
zefram_CHECK_TYPE(size_t, unsigned, $stdlib_incs)
zefram_CHECK_TYPEHDR(size_t, $stdlib_incs)
TYPEHDR_size_t=$zefram_cv_type_header_size_t; AC_SUBST(TYPEHDR_size_t)
zefram_CHECK_TYPE(socklen_t, , $socket_incs)
zefram_CHECK_TYPEHDR(socklen_t, $socket_incs)
zefram_GUESS_SOCKLEN_T
TYPEHDR_socklen_t=$zefram_cv_type_header_socklen_t; AC_SUBST(TYPEHDR_socklen_t)
zefram_CHECK_TYPE(ssize_t, int, $stdlib_incs)
zefram_CHECK_TYPEHDR(ssize_t, $stdlib_incs)
TYPEHDR_ssize_t=$zefram_cv_type_header_ssize_t; AC_SUBST(TYPEHDR_ssize_t)
zefram_CHECK_TYPE(uid_t, int, $unistd_incs)
zefram_CHECK_TYPE(uint8_t, u_int8_t, $stdint_incs)
zefram_CHECK_TYPE(uint16_t, u_int16_t, $stdint_incs)
zefram_CHECK_TYPE(uint32_t, u_int32_t, $stdint_incs)
zefram_CHECK_TYPE(u_int8_t, unsigned char, $stdint_incs)
zefram_CHECK_TYPE(u_int16_t, unsigned short, $stdint_incs)
zefram_CHECK_TYPE(u_int32_t, unsigned long, $stdint_incs)

zefram_CHECK_STRUCT(hostent, $socket_incs netdb.h)
zefram_CHECK_STRUCT(in_addr, $socket_incs netinet/in.h)
zefram_CHECK_STRUCT(in6_addr, $socket_incs netinet/in.h)
zefram_CHECK_STRUCT(sigaction, sys/types.h signal.h)
zefram_CHECK_STRUCT(sockaddr, $socket_incs)
zefram_CHECK_STRUCT_MEMBER(sockaddr, sa_len, $socket_incs)
zefram_CHECK_STRUCT(sockaddr_in, $socket_incs netinet/in.h)
zefram_CHECK_STRUCT(sockaddr_in6, $socket_incs netinet/in.h)
zefram_CHECK_STRUCT_MEMBER(sockaddr_in6, sin6_scope_id, $socket_incs netinet/in.h)
zefram_CHECK_STRUCT(sockaddr_un, $socket_incs sys/un.h)

AC_TYPE_SIGNAL

AC_CHECK_FUNCS(basename)
zefram_CHECK_FUNC_DECLARED_IFEXIST(basename, $string_incs)
zefram_CHECK_FUNC_DECLARED(bind, $socket_incs)
zefram_CHECK_BINDCONNECT_PROTOTYPE(bind)
zefram_CHECK_FUNC_DECLARED(bsearch, $stdlib_incs)
AC_CHECK_FUNCS(closelog)
zefram_CHECK_FUNC_DECLARED(connect, $socket_incs)
zefram_CHECK_BINDCONNECT_PROTOTYPE(connect)
zefram_CHECK_VAR_DECLARED(errno, sys/types.h errno.h)
zefram_CHECK_FUNC_DECLARED(exit, $stdlib_incs)
zefram_CHECK_FUNC_DECLARED(free, $stdlib_incs)
AC_CHECK_FUNCS(gethostbyaddr gethostbyaddr_r)
zefram_CHECK_FUNC_FLAVOR_NETDBR_IFEXIST(gethostbyaddr_r)
AC_CHECK_FUNCS(gethostbyname gethostbyname_r)
zefram_CHECK_FUNC_FLAVOR_NETDBR_IFEXIST(gethostbyname_r)
AC_CHECK_FUNCS(gethostbyname2 gethostbyname2_r)
zefram_CHECK_FUNC_FLAVOR_NETDBR_IFEXIST(gethostbyname2_r)
AC_CHECK_FUNCS(getipnodebyaddr getipnodebyname)
zefram_CHECK_FUNC_DECLARED(getopt, $getopt_incs)
zefram_CHECK_FUNC_DECLARED(getpeername, $socket_incs)
AC_CHECK_FUNCS(getprotobyname getprotobyname_r)
zefram_CHECK_FUNC_FLAVOR_NETDBR_IFEXIST(getprotobyname_r)
AC_CHECK_FUNCS(getprotobynumber getprotobynumber_r)
zefram_CHECK_FUNC_FLAVOR_NETDBR_IFEXIST(getprotobynumber_r)
AC_CHECK_FUNCS(getservbyname getservbyname_r)
zefram_CHECK_FUNC_FLAVOR_NETDBR_IFEXIST(getservbyname_r)
AC_CHECK_FUNCS(getservbyport getservbyport_r)
zefram_CHECK_FUNC_FLAVOR_NETDBR_IFEXIST(getservbyport_r)
zefram_CHECK_FUNC_DECLARED(getsockname, $socket_incs)
AC_CHECK_FUNCS(htonl htons)
zefram_CHECK_VAR(in6addr_any, struct in6_addr, $socket_incs netinet/in.h)
zefram_CHECK_VAR_DECLARED_IFEXIST(in6addr_any, $socket_incs netinet/in.h)
zefram_CHECK_VAR(in6addr_loopback, struct in6_addr, $socket_incs netinet/in.h)
zefram_CHECK_VAR_DECLARED_IFEXIST(in6addr_loopback, $socket_incs netinet/in.h)
AC_CHECK_FUNCS(inet_ntop inet_pton)
zefram_CHECK_FUNC_DECLARED(malloc, $stdlib_incs)
zefram_CHECK_FUNC_DECLARED(memchr, $string_incs)
AC_CHECK_FUNCS(memcpy)
zefram_CHECK_FUNC_DECLARED_IFEXIST(memcpy, $string_incs)
AC_CHECK_FUNCS(memmove)
zefram_CHECK_FUNC_DECLARED_IFEXIST(memmove, $string_incs)
AC_CHECK_FUNCS(ntohl ntohs openlog)
zefram_CHECK_VAR_DECLARED(optarg, $getopt_incs)
zefram_CHECK_VAR_DECLARED(opterr, $getopt_incs)
zefram_CHECK_VAR_DECLARED(optind, $getopt_incs)
zefram_CHECK_VAR_DECLARED(optopt, $getopt_incs)
AC_CHECK_FUNCS(poll)
zefram_CHECK_FUNC_DECLARED_IFEXIST(poll, sys/types.h sys/poll.h)
zefram_CHECK_FUNC_DECLARED(qsort, $stdlib_incs)
zefram_CHECK_FUNC_DECLARED(realloc, $stdlib_incs)
AC_CHECK_FUNCS(setregid)
zefram_CHECK_FUNC_DECLARED_IFEXIST(setregid, $unistd_incs)
AC_CHECK_FUNCS(setresgid)
zefram_CHECK_FUNC_DECLARED_IFEXIST(setresgid, $unistd_incs)
AC_CHECK_FUNCS(setreuid)
zefram_CHECK_FUNC_DECLARED_IFEXIST(setreuid, $unistd_incs)
AC_CHECK_FUNCS(setresuid)
zefram_CHECK_FUNC_DECLARED_IFEXIST(setresuid, $unistd_incs)
AC_CHECK_FUNCS(setsid sigaction sigblock sigpause sigprocmask sigsuspend socket)
AC_CHECK_FUNCS(strchr)
zefram_CHECK_FUNC_DECLARED_IFEXIST(strchr, $string_incs)
zefram_CHECK_FUNC_DECLARED(strcmp, $string_incs)
zefram_CHECK_FUNC_DECLARED(strcpy, $string_incs)
AC_CHECK_FUNCS(strerror)
zefram_CHECK_FUNC_DECLARED_IFEXIST(strerror, $string_incs errno.h)
AC_CHECK_FUNCS(strrchr)
zefram_CHECK_FUNC_DECLARED_IFEXIST(strrchr, $string_incs)
zefram_CHECK_FUNC_DECLARED(strspn, $string_incs)
zefram_CHECK_FUNC_DECLARED(strtoul, $stdlib_incs)
AC_CHECK_FUNCS(syslog vsyslog)
AC_CHECK_FUNCS(wait3)
zefram_CHECK_FUNC_DECLARED_IFEXIST(wait3, $wait_incs)
AC_CHECK_FUNCS(wait4)
zefram_CHECK_FUNC_DECLARED_IFEXIST(wait4, $wait_incs)
AC_CHECK_FUNCS(waitpid)
zefram_CHECK_FUNC_DECLARED_IFEXIST(waitpid, $wait_incs)

zefram_CHECK_SHLIB
if test $zefram_cv_sys_shlib = yes; then
	L=L
else
	L=N
fi
AC_SUBST(L)dnl

AC_OUTPUT(Makefile Lib/Makefile Lib/Compat/Makefile Utils/Makefile,
[test -z "$CONFIG_HEADERS" || echo > stamp-h])
