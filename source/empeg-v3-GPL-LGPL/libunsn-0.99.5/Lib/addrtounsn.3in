.\"
.\" Lib/addrtounsn.3in -- manual page for unsn_addrtounsn()
.\" Copyright (C) 2000  Andrew Main
.\"
.\" This library is free software; you can redistribute it and/or
.\" modify it under the terms of the GNU Lesser General Public
.\" License as published by the Free Software Foundation; either
.\" version 2 of the License, or (at your option) any later version.
.\"
.\" This library is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" Lesser General Public License for more details.
.\"
.\" You should have received a copy of the GNU Lesser General Public
.\" License along with this library; if not, write to the Free Software
.\" Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
.\"
.\" NAMES: unsn_addrtounsn.3
.TH UNSN_ADDRTOUNSN 3 "@DATE@" "libunsn @VERSION@"
.SH NAME
unsn_addrtounsn \- convert socket address structure to UNSN
.SH SYNOPSIS
.nf
.B #include <libunsn.h>
.sp
.BI "char *unsn_addrtounsn(int " sock_fd ,
.BI "        struct sockaddr const *" addr ", socklen_t " addrlen ,
.BI "        unsigned " opts );
.fi
.SH DESCRIPTION
This function converts a socket address structure to a
Universal Network Socket Name (UNSN) string.
.PP
.I addr
and
.I addrlen
specify a socket address structure.
.I sock_fd
must be a socket with the appropriate parameters for the address
(e.g., the address is that of a datagram received on the socket).
.PP
Some of the socket parameters cannot be determined from an existing socket,
and this impairs the capability to determine the full address of a socket.
In many cases these functions can successfully guess the missing parameters,
but in some cases it is not possible, and the error
.B UNSN_ESOCKNOADDR
will be returned.  If the socket creation parameters are available
elsewhere (for example, by using
.IR unsn_opensock_gethints (3)
instead of
.IR unsn_opensock (3)
to create the socket), then there is a variant of this function
that can make use of that information.  See
.IR unsn_saitounsn (3)
for details.
.PP
The
.I opts
argument is the inclusive-OR of zero or more bit flags affecting the
operation of the function.  The following flags are defined:
.TP
.B UNSN_USENAMES
In generating the UNSN, use symbolic names rather than numeric addresses
wherever possible.  The default is to use numeric addresses only.
.SH "RETURN VALUE"
Returns freshly
.IR malloc (3)ed
storage, containing a NUL-terminated UNSN in canonical format.
The caller is responsible for
.IR free (3)ing
this storage.  On error, NULL is returned, and
.IR errno (3)
is set to indicate the error.
.SH ERRORS
Note that some of these error numbers are specific to
.IR libunsn (3).
See
.IR unsn_errno (3)
for more information.
.TP
.B EBADF
.I sock_fd
is not a valid file descriptor.
.TP
.B ENOTSOCK
.I sock_fd
does not refer to a socket.
.TP
.B UNSN_ESOCKNOADDR
It is not possible to determine a usable address for this type of socket.
.TP
.B EPFNOSUPPORT
The socket family is not recognized.
.TP
.B ESOCKTNOSUPPORT
The socket type is not recognized for
this socket family.
.TP
.B EPROTONOSUPPORT
The protocol is not recognized for
this socket family and type.
.TP
.B EPROTONOSUPPORT
The address family is not recognized for
this socket family, type and protocol.
.TP
.B ENOMEM
.IR malloc (3)
failed to allocate enough memory to build the string to be returned.
.SH "SEE ALSO"
.IR libunsn (3),
.IR unsn_saitounsn (3)
